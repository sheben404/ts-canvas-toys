{"mappings":"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","sources":["src/snake/main.ts"],"sourcesContent":["const snakeCanvas = document.getElementById(\"snakeCanvas\") as HTMLCanvasElement;\r\nconst startBtn = document.getElementById(\"startBtn\")\r\nconst snakeCtx = snakeCanvas.getContext(\"2d\");\r\nconst gridSize = 20;\r\nsnakeCtx.strokeRect(\r\n  0,\r\n  0,\r\n  Number(snakeCanvas.getAttribute(\"width\")),\r\n  Number(snakeCanvas.getAttribute(\"height\"))\r\n);\r\n\r\nfunction draw() {\r\n  // 定义一个全局的是否吃到食物的一个变量\r\n  let isEatFood = false;\r\n\r\n  // 小方格类\r\n  class Rect {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    color: string;\r\n\r\n    constructor(\r\n      x: number,\r\n      y: number,\r\n      width: number,\r\n      height: number,\r\n      color: string\r\n    ) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.width = width;\r\n      this.height = height;\r\n      this.color = color;\r\n    }\r\n    draw() {\r\n      snakeCtx.beginPath();\r\n      snakeCtx.fillStyle = this.color;\r\n      snakeCtx.fillRect(this.x, this.y, this.width, this.height);\r\n      snakeCtx.strokeRect(this.x, this.y, this.width, this.height);\r\n    }\r\n  }\r\n\r\n  // 蛇的构造函数\r\n  class Snake {\r\n    length: number;\r\n    head: Rect;\r\n    body: Rect[];\r\n    direction: number = 2\r\n    constructor(length = 0) {\r\n      this.length = length;\r\n      // 蛇头\r\n      this.head = new Rect(\r\n        snakeCanvas.width / 2,\r\n        snakeCanvas.width / 2,\r\n        gridSize,\r\n        gridSize,\r\n        \"red\"\r\n      );\r\n\r\n      // 蛇身\r\n      this.body = [];\r\n\r\n      let x = this.head.x - gridSize;\r\n      const y = this.head.y;\r\n\r\n      for (let i = 0; i < this.length; i++) {\r\n        const rect = new Rect(x, y, gridSize, gridSize, \"yellow\");\r\n        this.body.push(rect);\r\n        x -= gridSize;\r\n      }\r\n    }\r\n    drawSnake() {\r\n      // 如果碰到了\r\n      if (isHit(this)) {\r\n        clearInterval(timer);\r\n        const con = confirm(\r\n          `共吃了${this.body.length - this.length}个食物，重新开始吗`\r\n        );\r\n        if (con) {\r\n          draw();\r\n        }\r\n        startConfirm = true\r\n        return;\r\n      }\r\n      this.head.draw();\r\n      for (let i = 0; i < this.body.length; i++) {\r\n        this.body[i].draw();\r\n      }\r\n    };\r\n\r\n    moveSnake() {\r\n      const rect = new Rect(\r\n        this.head.x,\r\n        this.head.y,\r\n        this.head.width,\r\n        this.head.height,\r\n        \"yellow\"\r\n      );\r\n      this.body.unshift(rect);\r\n  \r\n      // 判断蛇头是否与食物重叠，重叠就是吃到了，没重叠就是没吃到\r\n      isEatFood = food && this.head.x === food.x && this.head.y === food.y;\r\n  \r\n      if (!isEatFood) {\r\n        // 没吃到就要去尾巴，想到与整条蛇没有变长\r\n        this.body.pop();\r\n      } else {\r\n        // 吃到了就不去尾，相当于整条蛇延长一个方格\r\n        // 并且吃到了，就要重新生成一个随机食物\r\n  \r\n        food = randomFood(this);\r\n        food.draw();\r\n        isEatFood = false;\r\n      }\r\n  \r\n      // 根据方向，控制蛇头的坐标\r\n      switch (this.direction) {\r\n        case 0:\r\n          this.head.x -= this.head.width;\r\n          break;\r\n        case 1:\r\n          this.head.y -= this.head.height;\r\n          break;\r\n        case 2:\r\n          this.head.x += this.head.width;\r\n          break;\r\n        case 3:\r\n          this.head.y += this.head.height;\r\n          break;\r\n      }\r\n    };\r\n  }\r\n\r\n  document.onkeydown = function (e) {\r\n    switch (e.keyCode) {\r\n      case 37:\r\n        // 三元表达式，防止右移动时按左，下面同理(贪吃蛇可不能直接掉头)\r\n        snake.direction = snake.direction === 2 ? 2 : 0;\r\n        snake.moveSnake();\r\n        break;\r\n      case 38:\r\n        snake.direction = snake.direction === 3 ? 3 : 1;\r\n        snake.moveSnake();\r\n        break;\r\n      case 39:\r\n        snake.direction = snake.direction === 0 ? 0 : 2;\r\n        snake.moveSnake();\r\n        break;\r\n      case 40:\r\n        snake.direction = snake.direction === 1 ? 1 : 3;\r\n        snake.moveSnake();\r\n        break;\r\n    }\r\n  };\r\n\r\n  function randomFood(snake: Snake) {\r\n    let isInSnake = true;\r\n    let rect: Rect;\r\n    while (isInSnake) {\r\n      const x =\r\n        Math.round(\r\n          (Math.random() * (snakeCanvas.width - gridSize)) / gridSize\r\n        ) * gridSize;\r\n      const y =\r\n        Math.round(\r\n          (Math.random() * (snakeCanvas.height - gridSize)) / gridSize\r\n        ) * gridSize;\r\n      rect = new Rect(x, y, gridSize, gridSize, \"blue\");\r\n      if (\r\n        (snake.head.x === x && snake.head.y === y) ||\r\n        snake.body.find((item) => item.x === x && item.y === y)\r\n      ) {\r\n        isInSnake = true;\r\n        continue;\r\n      } else {\r\n        isInSnake = false;\r\n      }\r\n    }\r\n    return rect;\r\n  }\r\n\r\n  function isHit(snake: Snake) {\r\n    const head = snake.head;\r\n    const xLimit = head.x < 0 || head.x >= snakeCanvas.width;\r\n    const yLimit = head.y < 0 || head.y >= snakeCanvas.height;\r\n\r\n    const hitSelf = snake.body.find(({ x, y }) => head.x === x && head.y === y);\r\n    return xLimit || yLimit || hitSelf;\r\n  }\r\n\r\n  const snake = new Snake(1);\r\n  snake.drawSnake();\r\n  let food = randomFood(snake);\r\n  food.draw();\r\n\r\n  function animate() {\r\n    snakeCtx.clearRect(0, 0, snakeCanvas.width, snakeCanvas.height);\r\n    snakeCtx.strokeRect(\r\n      0,\r\n      0,\r\n      Number(snakeCanvas.getAttribute(\"width\")),\r\n      Number(snakeCanvas.getAttribute(\"height\"))\r\n    );\r\n    snake.moveSnake();\r\n    snake.drawSnake();\r\n    food.draw();\r\n  }\r\n\r\n  const timer = setInterval(() => {\r\n    animate();\r\n  }, 100);\r\n}\r\n\r\nstartBtn.onclick = ()=>{\r\n  startConfirm = true\r\n  draw()\r\n}\r\n\r\nlet startConfirm = confirm('是否开始游戏?')\r\nif(startConfirm){\r\n  draw();\r\n}\r\n\r\n"],"names":["$e0197c7255f01069$var$snakeCanvas","document","getElementById","$e0197c7255f01069$var$startBtn","$e0197c7255f01069$var$snakeCtx","getContext","$e0197c7255f01069$var$draw","isEatFood","Rect","x","y","width","height","color","draw","beginPath","fillStyle","this","fillRect","strokeRect","randomFood","snake","rect","isInSnake","x2","Math","round","random","y2","head","body","find","item","onkeydown","e","keyCode","direction","moveSnake","length","x1","y1","i","push","drawSnake","xLimit","yLimit","hitSelf","isHit","clearInterval","timer","confirm","$e0197c7255f01069$var$startConfirm","i1","unshift","food","pop","setInterval","clearRect","Number","getAttribute","onclick"],"version":3,"file":"index.1bd3eaf3.js.map"}